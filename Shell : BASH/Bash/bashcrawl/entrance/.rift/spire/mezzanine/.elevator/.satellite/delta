IyEvYmluL2Jhc2gKIwojIElmIHlvdSBhcmUgcmVhZGluZyB0aGlzLCB5b3UgaGF2ZSB3YW5kZXJl
ZCBvdXQgb2YgYm91bmRzCiMgYW5kIGFyZSByZWFkaW5nIHRoZSBjb2RlIHRoYXQgZHJpdmVzIHRo
ZSBnYW1lLgojCiMgICAgICAgICAgICAgICAgICAgIENvbmdyYXR1bGF0aW9ucyEKIwojIExlYXJu
aW5nIExpbnV4IGlzIGFsbCBhYm91dCBjdXJpb3NpdHksIHNvIHJlYWQgdGhpcyBjb2RlIGFuZCBz
ZWUKIyBpZiB5b3UgY2FuIGZpZ3VyZSBvdXQgd2hhdCBpdCBkb2VzLgojCiMgV2hlbiB5b3UncmUg
cmVhZHkgdG8gY29udGludWUgcGxheWluZyB0aGUgZ2FtZSwgdGhvdWdoLCBzdGljayB0bwojIHRo
ZSBzY3JvbGxzLiBJZiB5b3UncmUgc3R1Y2ssIGdvIHRvIEdpdGxhYiBhbmQgY3JlYXRlIGFuIGlz
c3VlLgojIFdlJ3JlIGhhcHB5IHRvIHByb3ZpZGUgaGludHMuCiMgCnJvbGwoKSB7CiAgICBlY2hv
ICJFbnRlciBhIG51bWJlci4iCiAgICByZWFkIE5VTQogICAgQUxQSEE9JFJBTkRPTQogICAgT01F
R0E9JFJBTkRPTQogICAgQT0kKGN1dCAtYiAxLTIgPDw8ICR7QUxQSEF9KQogICAgTz0kKGN1dCAt
YiAxLTIgPDw8ICR7T01FR0F9KQogICAgbGV0ICJOVU09JEEgJSAkTyIKICAgIE1PTlNURVI9JFJB
TkRPTQogICAgTU9OU1RFUj0kKGN1dCAtYiAxLTIgPDw8ICR7TU9OU1RFUn0pCiAgICBOVU09JChj
dXQgLWIgMS0yIDw8PCAke05VTX0pCgogICAgZWNobyAiVGhlIG1vbnN0ZXIgcm9sbGVkICIgJE1P
TlNURVIKICAgIGVjaG8gIllvdSByb2xsZWQgIiAkTlVNCiAgICByZXNvbHZlCn0KCmdhbWVvdmVy
ICgpIHsKICAgIGVjaG8gIllvdSBzZWUgdGhlIGNvcnBzZSBvZiBhIHNsYWluIGFkdmVudHVyZXIg
b24gdGhlIGZsb29yIG9mIHRoZSBkdW5nZW9uLiIgPiBjb3Jwc2UKICAgIGVjaG8gIllvdSBmaW5k
I